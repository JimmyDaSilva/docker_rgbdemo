#!/bin/bash
 
# Creates a Docker image for running RGBDemo( /home/docker/rgbdemo/build/bin ) programs for 3D vision and capture using the
# ASUS Xtion Pro Live camera( might work with kinect ). It builds the image based on commands in the Dockerfile file and
# then starts an xterm controlled by the default user( userID=docker passwd=docker ).
# You'll find the rgbdemo package installed in the /home/docker director and the executable applications are in build/bin.
# OpenNI and PCL are installed so there are samples for those installed to. Look for NiViewer and Sample-Ni...... progs to run.
# 
# Installing various required packages into the Docker resources for installation into the container without including
# the compressed file or even the expanded installation directory using files in the resources' directory in the hosts Docker 
# directory. There are three packages needed, the OpenNI, NiTE and Sensor packages. After those packages are setup in the
# resources director, the Docker image is created or started
#
HERE=`pwd`
mkdir -p resources
if [ ! -e resources/OpenNI-Bin-Dev-Linux-x64-v1.5.7.10.tar.bz2 ]
then
  echo "doesn't Exist bz2"
  if [ ! -e resources/OpenNI-Bin-Dev-Linux-x64-v1.5.7.10.tar.zip ]
  then
    echo "doesnt Exist zip"
    cd resources
    wget http://www.openni.ru/wp-content/uploads/2013/11/OpenNI-Bin-Dev-Linux-x64-v1.5.7.10.tar.zip
    cd $HERE
  fi
  echo "unzip and remove zip"
  unzip resources/OpenNI-Bin-Dev-Linux-x64-v1.5.7.10.tar.zip -d resources
  rm -rf resources/OpenNI-Bin-Dev-Linux-x64-v1.5.7.10.tar.zip
  # Final check to make sure we have the NiTE installation file
  if [ ! -e resources/OpenNI-Bin-Dev-Linux-x64-v1.5.7.10.tar.bz2 ]
  then
    echo "ERROR: OpenNI install file doesn't exist.... EXIT!"
    exit
  fi
fi
if [ ! -e resources/NITE-Bin-Linux-x64-v1.5.2.23.tar.bz2 ] 
then
  echo "doesn't Exist bz2"
  if [ ! -e resources/NITE-Bin-Linux-x64-v1.5.2.23.tar.zip ] 
  then
    echo "doesnt Exist zip"
    cd resources
    wget http://www.openni.ru/wp-content/uploads/2013/10/NITE-Bin-Linux-x64-v1.5.2.23.tar.zip
    cd $HERE
  fi
  echo "unzip and remove zip"
  unzip resources/NITE-Bin-Linux-x64-v1.5.2.23.tar.zip -d resources
  rm -rf unzip resources/NITE-Bin-Linux-x64-v1.5.2.23.tar.zip
  # Final check to make sure we have the NiTE installation file
  if [ ! -e resources/NITE-Bin-Linux-x64-v1.5.2.23.tar.bz2 ] 
  then
    echo "ERROR: NiTE install file doesn't exist.... EXIT!"
    exit
  fi
fi
if [ ! -e resources/Sensor-Bin-Linux-x64-v5.1.6.6.tar.bz2 ]
then
  echo "doesn't Exist bz2"
  if [ ! -e resources/Sensor-Bin-Linux-x64-v5.1.6.6.tar.zip ]
  then
    echo "doesnt Exist zip"
    cd resources
    wget http://www.openni.ru/wp-content/uploads/2013/11/Sensor-Bin-Linux-x64-v5.1.6.6.tar.zip
    cd $HERE
  fi
  echo "unzip and remove zip"
  unzip resources/Sensor-Bin-Linux-x64-v5.1.6.6.tar.zip -d resources
  rm -rf resources/Sensor-Bin-Linux-x64-v5.1.6.6.tar.zip
  # Final check to make sure we have the NiTE installation file
  if [ ! -e resources/Sensor-Bin-Linux-x64-v5.1.6.6.tar.bz2 ]
  then
    echo "ERROR: Sensor Driver install file doesn't exist.... EXIT!"
    exit
  fi
fi
 
CONTAINER="rgbdemo/openni"
 
# check if the image exists and build it if it doesn't, otherwise setup and run it
#RUNNING=$(sudo docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
if [ $? -eq 1 ]; then
  echo "$CONTAINER does not exist."
  echo "creating $CONTAINER."
 
  #create the container using the Docker File debDockerFile-xterm
  #it's based on the default debian container
  #
  #sudo docker build -t rgbdemo/openni . 
  docker build -t $CONTAINER . 
fi
 
# create the var to pass to docker linking host file X0 to container file X0
# USB bus for USB devices
# Direct Rendering Interface to GPU DRI for 3D acceleration
XSOCK=/tmp/.X11-unix/X0
VBUS=/dev/bus/usb
VDRI=/dev/dri
 
# run the xterm xapp container
# -i keeps stdin open
# -t creates a psuedo tty
#docker run -u docker --privileged -it -v $XSOCK:$XSOCK -v $VBUS:$VBUS -v $VDRI:$VDRI $CONTAINER
docker run --privileged -it -v $XSOCK:$XSOCK:rw -v $VBUS:$VBUS:rw -v $VDRI:$VDRI:rw $CONTAINER
